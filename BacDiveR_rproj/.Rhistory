At_data
View(At_data)
library(BacDiveR)
library(magrittr)
library(ggplot2)
taxon_1 <- "Paenibacillus vortex"
Bac_data <- bd_retrieve_taxon(name = taxon_1)
taxon_2 <- "Fusicatenibacter saccharivorans"
At_data <- bd_retrieve_taxon(name = taxon_2)
extract_temps <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$culture_growth_condition$culture_temp$temp) %>%
unlist() %>%
as.numeric() %>%
data.frame(temp_C = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
extract_gc <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$molecular_biology$GC_content) %>%
unlist() %>%
as.numeric() %>%
data.frame(gc_cont = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
gc_Bac <- extract_gc(Bac_data, taxon_1)
gc_At <- extract_gc(At_data, taxon_2)
rbind(gc_Bac, gc_At) %>%
ggplot(aes(x = taxon, y = gc_cont)) +
geom_boxplot(notch = TRUE) +
geom_jitter(height = 0, alpha = 0.5)
#> notch went outside hinges. Try setting notch=FALSE.
taxon_1 <- "Dorea longicatena"
Bac_data <- bd_retrieve_taxon(name = taxon_1)
taxon_2 <- "Fusicatenibacter saccharivorans"
At_data <- bd_retrieve_taxon(name = taxon_2)
extract_temps <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$culture_growth_condition$culture_temp$temp) %>%
unlist() %>%
as.numeric() %>%
data.frame(temp_C = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
extract_gc <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$molecular_biology$GC_content) %>%
unlist() %>%
as.numeric() %>%
data.frame(gc_cont = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
gc_Bac <- extract_gc(Bac_data, taxon_1)
gc_At <- extract_gc(At_data, taxon_2)
rbind(gc_Bac, gc_At) %>%
ggplot(aes(x = taxon, y = gc_cont)) +
geom_boxplot(notch = TRUE) +
geom_jitter(height = 0, alpha = 0.5)
taxon <- "Fusicatenibacter saccharivorans"
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxa))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
gc_pull <- extract_gc(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
View(gc_pull)
View(spore_pull)
View(Bac_lib)
extract_gram <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$gram_stain) %>%
unlist() %>%
as.numeric() %>%
data.frame(gram = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
taxon <- paste(tax_table_annot$Genus[i], tax_table_annot$Species[i])
taxon <- "Fusicatenibacter saccharivorans"
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxa))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
gram_pull <- extract_gram(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
taxon <- paste(tax_table_annot$Genus[i], tax_table_annot$Species[i])
taxon <- "Fusicatenibacter saccharivorans"
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxa))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
gram_pull <- extract_gram(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
taxon <- paste(tax_table_annot$Genus[i], tax_table_annot$Species[i])
taxon <- "Fusicatenibacter saccharivorans"
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
gram_pull <- extract_gram(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
extract_gc <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$molecular_biology$GC_content) %>%
unlist() %>%
as.numeric() %>%
data.frame(gc_cont = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
extract_gram <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$gram_stain) %>%
unlist() %>%
as.numeric() %>%
data.frame(gram = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
extract_spore <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$spore_formation$ability) %>%
unlist() %>%
data.frame(spore_L = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
taxon <- paste(tax_table_annot$Genus[i], tax_table_annot$Species[i])
taxon <- "Fusicatenibacter saccharivorans"
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
gram_pull <- extract_gram(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
View(spore_pull)
View(gram_pull)
View(Bac_lib)
View(Bac_lib)
extract_ox <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$oxygen_tolerance) %>%
unlist() %>%
data.frame(oxy_L = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
taxon <- "Fusicatenibacter saccharivorans"
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
oxy_pull <- extract_gram(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
View(oxy_pull)
View(Bac_lib)
taxon <- "Fusicatenibacter saccharivorans"
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
oxy_pull <- extract_oxy(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
extract_oxy <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$oxygen_tolerance) %>%
unlist() %>%
data.frame(oxy_L = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
taxon <- "Fusicatenibacter saccharivorans"
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
oxy_pull <- extract_oxy(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
View(oxy_pull)
View(spore_pull)
if(!require('devtools')) install.packages('devtools'); devtools::install_github('TIBHannover/BacDiveR')
library(BacDiveR)
library(magrittr)
library(ggplot2)
library(tidyr)
library(readr)
library(tidyverse)
library(attempt)
extract_gc <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$molecular_biology$GC_content) %>%
unlist() %>%
as.numeric() %>%
data.frame(gc_cont = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
extract_gram <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$gram_stain) %>%
unlist() %>%
as.numeric() %>%
data.frame(gram = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
extract_spore <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$spore_formation$ability) %>%
unlist() %>%
data.frame(spore_L = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
extract_oxy <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$oxygen_tolerance) %>%
unlist() %>%
data.frame(oxy_L = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
tax_table <- read_csv('tax_table.csv')
tax_table$Genus <- gsub('_', ' ', tax_table$Genus)
tax_table$Species <- gsub('_', ' ', tax_table$Species)
tax_table$Genus <- gsub('-', '', tax_table$Genus)
tax_table$Species <- gsub('-', '', tax_table$Species)
tax_table$Genus <- gsub(' ', '', tax_table$Genus)
tax_table$Species <- gsub(' ', '', tax_table$Species)
tax_table$Genus <- gsub('/', '', tax_table$Genus)
tax_table$Species <- gsub('/', '', tax_table$Species)
tax_table_annot <- tax_table
tax_table_annot$spore <- NA
tax_table_annot$oxy <- NA
View(tax_table_annot)
for (i in 1:25) {
if (!is.na(tax_table_annot$Species[i])) {
taxon <- paste(tax_table_annot$Genus[i], tax_table_annot$Species[i])
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
oxy_pull <- extract_oxy(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
tryCatch({ # spore
tax_table_annot$spore[i] <- spore_pull[1,1]
print(paste('Added', taxon, spore_pull[1,1], ' to table'))
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
tryCatch({  # oxy
tax_table_annot$oxy[i] <- oxy_pull[1,1]
print(paste('Added', taxon, oxy_pull[1,1], ' to table'))
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
write.csv(tax_table_annot, file = "tax_table_oxy_spore.csv", row.names = FALSE)
} else if (is.na(tax_table_annot$Species[i])) {
next
}
}
View(tax_table_annot)
View(oxy_pull)
View(spore_pull)
oxy_pull[1,1]
'anaerobe' %in% oxy_pull
oxy_pull
'anaerobe' %in% oxy_L
'anaerobe' %in% oxy_pull$oxy_L
spore_pull
for (i in 1:25) {
if (!is.na(tax_table_annot$Species[i])) {
taxon <- paste(tax_table_annot$Genus[i], tax_table_annot$Species[i])
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
oxy_pull <- extract_oxy(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
tryCatch({ # spore
if (TRUE %in% spore_pull$spore_L) {
tax_table_annot$spore[i] <- TRUE
print(paste('Added', taxon, TRUE, ' spore to table'))
}
else {
tax_table_annot$spore[i] <- FALSE
print(paste('Added', taxon, FALSE, ' spore to table'))
}
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
tryCatch({  # oxy
if ('anaerobe' %in% oxy_pull$oxy_L) {
tax_table_annot$oxy[i] <- 'anaerobe'
print(paste('Added', taxon, 'anaerobe', ' to table'))
} else if ('aerobe' %in% oxy_pull$oxy_L) {
tax_table_annot$oxy[i] <- 'aerobe'
print(paste('Added', taxon, 'aerobe', ' to table'))
}
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
# Write CSV
write.csv(tax_table_annot, file = "tax_table_oxy_spore.csv", row.names = FALSE)
} else if (is.na(tax_table_annot$Species[i])) {
next
}
}
TRUE %in% spore_pull$spore_L
tax_table_annot$spore[i] <- FALSE
tax_table_annot$spore[i] <- TRUE
for (i in 1:25) {
if (!is.na(tax_table_annot$Species[i])) {
taxon <- paste(tax_table_annot$Genus[i], tax_table_annot$Species[i])
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
oxy_pull <- extract_oxy(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
tryCatch({ # spore
if (TRUE %in% spore_pull$spore_L) {
tax_table_annot$spore[i] <- as.logical(TRUE)
print(paste('Added', taxon, TRUE, ' spore to table'))
}
else {
tax_table_annot$spore[i] <- as.logical(FALSE)
print(paste('Added', taxon, FALSE, ' spore to table'))
}
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
tryCatch({  # oxy
if ('anaerobe' %in% oxy_pull$oxy_L) {
tax_table_annot$oxy[i] <- 'anaerobe'
print(paste('Added', taxon, 'anaerobe', ' to table'))
} else if ('aerobe' %in% oxy_pull$oxy_L) {
tax_table_annot$oxy[i] <- 'aerobe'
print(paste('Added', taxon, 'aerobe', ' to table'))
}
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
# Write CSV
write.csv(tax_table_annot, file = "tax_table_oxy_spore.csv", row.names = FALSE)
} else if (is.na(tax_table_annot$Species[i])) {
next
}
}
as.logical(FALSE)
as.logical(TRUE)
View(tax_table_annot)
as.logical(0)
as.logical(1)
tax_table_annot$oxy <- as.logical(tax_table_annot$oxy)
tax_table <- read_csv('tax_table.csv')
tax_table$Genus <- gsub('_', ' ', tax_table$Genus)
tax_table$Species <- gsub('_', ' ', tax_table$Species)
tax_table$Genus <- gsub('-', '', tax_table$Genus)
tax_table$Species <- gsub('-', '', tax_table$Species)
tax_table$Genus <- gsub(' ', '', tax_table$Genus)
tax_table$Species <- gsub(' ', '', tax_table$Species)
tax_table$Genus <- gsub('/', '', tax_table$Genus)
tax_table$Species <- gsub('/', '', tax_table$Species)
tax_table_annot <- tax_table
tax_table_annot$spore <- NA
tax_table_annot$oxy <- NA
# 2: Pull BacDive Entry
## If Genus and Species are NOT NA, pull BacDive entries
for (i in 1:25) {
if (!is.na(tax_table_annot$Species[i])) {
taxon <- paste(tax_table_annot$Genus[i], tax_table_annot$Species[i])
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
oxy_pull <- extract_oxy(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
tryCatch({ # spore
if (TRUE %in% spore_pull$spore_L) {
tax_table_annot$spore[i] <- as.logical(TRUE)
print(paste('Added', taxon, TRUE, ' spore to table'))
}
else {
tax_table_annot$spore[i] <- as.logical(FALSE)
print(paste('Added', taxon, FALSE, ' spore to table'))
}
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
tryCatch({  # oxy
if ('anaerobe' %in% oxy_pull$oxy_L) {
tax_table_annot$oxy[i] <- 'anaerobe'
print(paste('Added', taxon, 'anaerobe', ' to table'))
} else if ('aerobe' %in% oxy_pull$oxy_L) {
tax_table_annot$oxy[i] <- 'aerobe'
print(paste('Added', taxon, 'aerobe', ' to table'))
}
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
# Write CSV
write.csv(tax_table_annot, file = "tax_table_oxy_spore.csv", row.names = FALSE)
} else if (is.na(tax_table_annot$Species[i])) {
next
}
}
View(tax_table_annot)
tax_table <- read_csv('tax_table.csv')
tax_table$Genus <- gsub('_', ' ', tax_table$Genus)
tax_table$Species <- gsub('_', ' ', tax_table$Species)
tax_table$Genus <- gsub('-', '', tax_table$Genus)
tax_table$Species <- gsub('-', '', tax_table$Species)
tax_table$Genus <- gsub(' ', '', tax_table$Genus)
tax_table$Species <- gsub(' ', '', tax_table$Species)
tax_table$Genus <- gsub('/', '', tax_table$Genus)
tax_table$Species <- gsub('/', '', tax_table$Species)
tax_table_annot <- tax_table
tax_table_annot$spore <- NA
tax_table_annot$oxy <- NA
# 2: Pull BacDive Entry
## If Genus and Species are NOT NA, pull BacDive entries
for (i in 1:nrow(tax_table_annot)) {
if (!is.na(tax_table_annot$Species[i])) {
taxon <- paste(tax_table_annot$Genus[i], tax_table_annot$Species[i])
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
oxy_pull <- extract_oxy(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
tryCatch({ # spore
if (TRUE %in% spore_pull$spore_L) {
tax_table_annot$spore[i] <- as.logical(TRUE)
print(paste('Added', taxon, TRUE, ' spore to table'))
}
else {
tax_table_annot$spore[i] <- as.logical(FALSE)
print(paste('Added', taxon, FALSE, ' spore to table'))
}
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
tryCatch({  # oxy
if ('anaerobe' %in% oxy_pull$oxy_L) {
tax_table_annot$oxy[i] <- 'anaerobe'
print(paste('Added', taxon, 'anaerobe', ' to table'))
} else if ('aerobe' %in% oxy_pull$oxy_L) {
tax_table_annot$oxy[i] <- 'aerobe'
print(paste('Added', taxon, 'aerobe', ' to table'))
}
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
# Write CSV
write.csv(tax_table_annot, file = "tax_table_oxy_spore.csv", row.names = FALSE)
print(i)
} else if (is.na(tax_table_annot$Species[i])) {
next
}
}
extract_gc <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$molecular_biology$GC_content) %>%
unlist() %>%
as.numeric() %>%
data.frame(gc_cont = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
extract_gram <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$gram_stain) %>%
unlist() %>%
as.numeric() %>%
data.frame(gram = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
extract_spore <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$spore_formation$ability) %>%
unlist() %>%
data.frame(spore_L = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
extract_oxy <- function(dataset, taxon_name) {
purrr::map(.x = dataset, .f = ~.x$morphology_physiology$oxygen_tolerance) %>%
unlist() %>%
data.frame(oxy_L = ., taxon = rep(taxon_name, length(.))) %>%
return()
}
library(BacDiveR)
library(magrittr)
library(ggplot2)
library(tidyr)
library(readr)
library(tidyverse)
library(attempt)
tax_table <- read_csv('tax_table.csv')
tax_table$Genus <- gsub('_', ' ', tax_table$Genus)
tax_table$Species <- gsub('_', ' ', tax_table$Species)
tax_table$Genus <- gsub('-', '', tax_table$Genus)
tax_table$Species <- gsub('-', '', tax_table$Species)
tax_table$Genus <- gsub(' ', '', tax_table$Genus)
tax_table$Species <- gsub(' ', '', tax_table$Species)
tax_table$Genus <- gsub('/', '', tax_table$Genus)
tax_table$Species <- gsub('/', '', tax_table$Species)
tax_table_annot <- tax_table
tax_table_annot$spore <- NA
tax_table_annot$oxy <- NA
for (i in 1:nrow(tax_table_annot)) {
if (!is.na(tax_table_annot$Species[i])) {
taxon <- paste(tax_table_annot$Genus[i], tax_table_annot$Species[i])
tryCatch({
Bac_lib <- bd_retrieve_taxon(name = taxon)
print(paste('Retrieving', taxon))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
## Now that we have the BacDive entry, let's pull GC content and Spore (?)
oxy_pull <- extract_oxy(Bac_lib, taxon)
spore_pull <- extract_spore(Bac_lib, taxon)
tryCatch({ # spore
if (TRUE %in% spore_pull$spore_L) {
tax_table_annot$spore[i] <- as.logical(TRUE)
print(paste('Added', taxon, TRUE, ' spore to table'))
}
else {
tax_table_annot$spore[i] <- as.logical(FALSE)
print(paste('Added', taxon, FALSE, ' spore to table'))
}
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
tryCatch({  # oxy
if ('anaerobe' %in% oxy_pull$oxy_L) {
tax_table_annot$oxy[i] <- 'anaerobe'
print(paste('Added', taxon, 'anaerobe', ' to table'))
} else if ('aerobe' %in% oxy_pull$oxy_L) {
tax_table_annot$oxy[i] <- 'aerobe'
print(paste('Added', taxon, 'aerobe', ' to table'))
}
}, error=function(e){cat("ERROR :", taxon, conditionMessage(e), "\n")})
# Write CSV
write.csv(tax_table_annot, file = "tax_table_oxy_spore.csv", row.names = FALSE)
print(i)
} else if (is.na(tax_table_annot$Species[i])) {
next
}
}
warnings()
